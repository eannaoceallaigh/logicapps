trigger:
  batch: true
  branches:
    include:
    - main

parameters:
  - name: environment_components
    type: object
    default:
    - deployment: 'terraform'
      environment: 'prod'
      service_connection: azure_subscription_1
  - name: overrideAction
    default: plan
    values:
      - plan
      - apply
      - destroy


variables:
  - name: agentPool
    value: default
  - name: timeoutInMinutes
    value: 60
  - name: isMain
    value: $[in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/master' )]

stages:
  - ${{ each deployment in parameters.environment_components }}:  
    - stage: Terraform
      jobs:
        - job: Terraform
          pool: ${{ variables.agentPool }}
          timeoutInMinutes: ${{ variables.timeoutInMinutes }}
          steps:
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              version: 1.20
          - task: TerraformCLI@0
            displayName: 'Init'
            inputs:
              command: init
              environmentServiceName: ${{ deployment.service_connection }}
              backendType: azurerm
              backendServiceArm: 'azure_subscription_1'
              ensureBackend: true
              backendAzureRmResourceGroupName: 'terraform-state'
              backendAzureRmResourceGroupLocation: westeurope
              backendAzureRmStorageAccountName: ekterraformstate
              backendAzureRmStorageAccountSku: Standard_LRS
              backendAzureRmContainerName: terraform
              backendAzureRmKey: terraform.tfstate
              allowTelemetryCollection: false
              createBackend: false
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
          - task: TerraformCLI@0
            displayName: 'Plan'
            inputs:
              command: plan
              environmentServiceName: ${{ deployment.service_connection }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
          - task: TerraformCLI@0
            displayName: 'Apply'
            condition: and(succeeded(), eq(variables.isMain, 'true'), eq('${{ parameters.overrideAction }}', 'apply'))
            inputs:
              command: apply
              environmentServiceName: ${{ deployment.service_connection }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
          - task: TerraformCLI@0
            displayName: 'Destroy'
            condition: and(succeeded(), eq(variables.isMain, 'true'), eq('${{ parameters.overrideAction }}', 'destroy'))
            inputs:
              command: destroy
              environmentServiceName: ${{ deployment.service_connection }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform
